#ifndef OUTPUT_WRAPPER_H
#define OUTPUT_WRAPPER_H

class OutputWrapper
{
  public:

    // ************************************************************************
    // OuputWrapper - Constructor 
    // ************************************************************************
    // Description:
    //  Constructs a manual type Output wrapper. A manual type is intialized
    //  with the idel state during setup and then the state of the output pin
    //  is commanded by using the set_state() operation to set the pin to
    //  the desired state (e.g. HIGH or LOW)
    //
    // ************************************************************************
    // Parameters:
    //  aPin:
    //   output pin being used
    //  aIdleState:
    //   output pin is set to this value during setup processing
    // ************************************************************************
    OutputWrapper(int aPin, 
                  int aIdleState) :
      mPin(aPin),
      mIdleState(aIdleState)
    {
    }

    // ************************************************************************
    //
    // ************************************************************************
    void setup();

    // ************************************************************************
    //
    // ************************************************************************
    void loop();

    // ************************************************************************
    //
    // ************************************************************************
    bool set_state(int aState);

    // ************************************************************************
    //
    // ************************************************************************
    void reset();

    // ************************************************************************
    //
    // ************************************************************************
    int get_state();

    // ************************************************************************
    //
    // ************************************************************************
    int get_pin() const { return mPin; }

    // ************************************************************************
    //
    // ************************************************************************
    int get_idle_state() const { return mIdleState; }

  protected:

  private:
    int     mPin;
    int     mIdleState;    
};
#endif